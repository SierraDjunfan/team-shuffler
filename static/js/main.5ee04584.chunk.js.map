{"version":3,"sources":["AddPlayerSection.tsx","ListedPlayer.tsx","RankItem.tsx","shuffle.tsx","TeamNames.tsx","App.tsx","index.tsx"],"names":["AppPlayerSection","props","id","onChange","e","onTextInputChangedFunction","target","value","textInput","onClick","addPlayerButtonFunction","ListedPlayer","className","playerDeletedButtonWasPressedFunction","index","name","RankItem","rank","shuffle","arr","sort","Math","random","allteamNames","initialState","players","storedPlayers","playerInput","teamOne","teamTwo","quickAddPlayers","teamOneName","teamTwoName","App","useState","state","setState","addPlayerToShuffle","console","log","map","p","includes","playerIsStored","getPlayerMMR","newArray","s","randomlyGeneratedTeamName","otherTeamName","allTeamNames","filter","n","playerDeleteButtonWasPressed","playerIndex","newPlayers","i","shuffledArray","midIndex","floor","length","firstHalf","slice","secondHalf","shuffleButtonWasPressed","textToCopy","navigator","clipboard","writeText","then","copyButtonWasPressed","newTeamNamesButtonWasPressed","a","b","text","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ee04584.chunk.js","sourcesContent":["import { isPropertySignature } from \"typescript\"\r\n\r\ninterface AddPlayerSectionProps {\r\n    textInput: string\r\n    addPlayerButtonFunction: (name: string) => void\r\n    onTextInputChangedFunction: (text: string) => void\r\n}\r\n\r\nexport const AppPlayerSection = (props: AddPlayerSectionProps) => {\r\n\r\n    return (\r\n        <div id=\"add-player-section\">\r\n            <input onChange={ e => props.onTextInputChangedFunction(e.target.value!)} value={props.textInput}></input>\r\n            <button id=\"add-button\" onClick={() => props.addPlayerButtonFunction(props.textInput)}>Add</button>\r\n        </div>\r\n    )\r\n}","interface ListedPlayerProps {\r\n    name: string\r\n    index: number\r\n    playerDeletedButtonWasPressedFunction: (playerIndex: number) => void\r\n}\r\n\r\nexport const ListedPlayer = (props: ListedPlayerProps) => {\r\n    return (\r\n        <div className=\"listed-player\">\r\n        <button className=\"delete-button\" onClick={() => props.playerDeletedButtonWasPressedFunction(props.index)}>X</button>\r\n        <h1>{props.name}</h1>\r\n        </div>\r\n    )\r\n}","\r\ninterface RankItemProps {\r\n    name: string\r\n    rank: number\r\n}\r\n\r\nexport const RankItem = (props: RankItemProps) => {\r\n\r\n    return (\r\n        <div className=\"rank-item\">\r\n            <p>{props.name}</p>\r\n            <p>{props.rank}</p>\r\n        </div>\r\n    )\r\n}","export const shuffle = (arr: string[]) => [...arr].sort(() => Math.random() - 0.5)","export const allteamNames = [\r\n\"Cool Guys\",\r\n\"Sexy Boys\",\r\n\"Dota RULEZ\",\r\n\"Epic Fortnite Team\",\r\n\"Return to Monkke\",\r\n\"Fr4gs 4 Dayz\",\r\n\"Basic White Boys\",\r\n\"Prison Lads\",\r\n\"Girls from Girltown\",\r\n\"We Love Feet\",\r\n\"TEAM SECRET\",\r\n\"The Strong People\",\r\n\"420 Fellas\",\r\n\"Chase's Army\",\r\n\"NO MORE SETT\",\r\n\"The Godly Men\",\r\n\"The Godly Women\",\r\n\"Navy Seals\",\r\n\"Imposters\",\r\n\"Jungle Only- No Lane\",\r\n\"E-Boys\",\r\n\"Simpy Simpers\",\r\n\"Horny Boys\",\r\n\"Naked Men\",\r\n\"Ants Team (Plural)\",\r\n\"Bathtub Bros\",\r\n\"Good Fam\",\r\n\"Bogan Idiots\",\r\n\"Big Computer, Big Neckbeard\",\r\n\"Vectory Gamers\",\r\n\"Inhibity Hoppers \",\r\n\"Josh and his Groupies\",\r\n\"Death Killers\",\r\n\"Men of Victory Wins\",\r\n\"U turn your back and U lose\",\r\n\"HorseMen\",\r\n\"WAP or DIE\",\r\n\"Tiny Peen Team\",\r\n\"Curry Slompers\",\r\n\"Cholesterol\",\r\n\"Male Models (Handsome guys)\",\r\n\"Friendly Escorts\",\r\n\"Death to USA\",\r\n\"Bushwhackers\",\r\n\"We sweat until we win\",\r\n\"Lane Pwners\",\r\n\"Busy Bees (killing)\",\r\n\"Farming Faggots\",\r\n\"Soft Skin Supple Lips\",\r\n\"Nerds with big glasses\",\r\n\"Chog the Hog\",\r\n\"Sizzling Duck Surprise\",\r\n\"Sausage Slurpers\",\r\n\"My Game is GALAX\",\r\n\"Betty White is immortal\",\r\n\"Fuck Tasmania\"\r\n]","import { AppPlayerSection } from 'AddPlayerSection'\nimport { ListedPlayer } from 'ListedPlayer'\nimport { RankItem } from 'RankItem'\nimport { useState } from 'react'\nimport { shuffle } from 'shuffle'\nimport { allteamNames } from 'TeamNames'\nimport './App.scss'\n\nexport interface Player {\n    name: string\n    rank: number\n}\n\ninterface AppState {\n    players: Player[]\n    storedPlayers: Player[]\n    playerInput: string\n    teamOne: string[]\n    teamTwo: string[]\n    quickAddPlayers: Player[]\n    teamOneName: string\n    teamTwoName: string\n}\n\nconst initialState: AppState = {\n    players: [],\n    storedPlayers: [\n        { name: \"Sara\", rank: 0 },\n        { name: \"Austin\", rank: 0 },\n        { name: \"Chase\", rank: 0 },\n        { name: \"Hunter\", rank: 0 },\n        { name: \"Michael\", rank: 0 },\n        { name: \"Josh\", rank: 0 },\n        { name: \"James\", rank: 0 },\n        { name: \"Stout\", rank: 0 },\n        { name: \"Reuben\", rank: 0 },\n        { name: \"Katie\", rank: 0 },\n    ],\n    playerInput: \"\",\n    teamOne: [],\n    teamTwo: [],\n    quickAddPlayers: [\n        { name: \"Sara\", rank: 0 },\n        { name: \"Austin\", rank: 0 },\n        { name: \"Chase\", rank: 0 },\n        { name: \"Hunter\", rank: 0 },\n        { name: \"Michael\", rank: 0 },\n        { name: \"Josh\", rank: 0 },\n        { name: \"James\", rank: 0 },\n        { name: \"Stout\", rank: 0 },\n        { name: \"Reuben\", rank: 0 },\n        { name: \"Katie\", rank: 0 },\n    ],\n    teamOneName: \"\",\n    teamTwoName: \"\"\n}\n\nexport const App = () => {\n\n    const startingMMR = 0\n    const [state, setState] = useState(initialState)\n\n    const addPlayerToShuffle = (name: string) => {\n        if (name !== null && name != \"\") {\n            console.log(state.players)\n            if (state.players.map(p => p.name).includes(name)) {\n                console.log(\"A player with this name already exists.\")\n                //Present Modal\n            } else {\n                const mmr = playerIsStored(name) ? getPlayerMMR(name) : startingMMR\n                const newArray = [...state.players, { name: name, rank: startingMMR }]\n                setState(s => ({ ...s, players: newArray, playerInput: \"\" }))\n            }\n        }\n    }\n\n    const playerIsStored = (name: string) => {\n        return state.storedPlayers.map(p => p.name).includes(name)\n    }\n\n    const getPlayerMMR = (name: string) => {\n\n    }\n\n    const playerTextChanged = (text: string) => {\n        setState(s => ({ ...s, playerInput: text }))\n    }\n\n    const shuffleButtonWasPressed = () => {\n        const shuffledArray = shuffle(state.players.map(p => p.name))\n\n        const midIndex = Math.floor(shuffledArray.length / 2)\n\n        const firstHalf = shuffledArray.slice(0, midIndex)\n        const secondHalf = shuffledArray.slice(midIndex, shuffledArray.length)\n\n        setState(s => ({ ...s, teamOne: firstHalf, teamTwo: secondHalf }))\n    }\n\n    const newTeamNamesButtonWasPressed = () => {\n        const teamOneName = randomlyGeneratedTeamName(\"\")\n        const teamTwoName = randomlyGeneratedTeamName(teamOneName)\n\n        setState(s => ({ ...s, teamOneName: teamOneName, teamTwoName: teamTwoName}))\n    }\n\n    const randomlyGeneratedTeamName = (otherTeamName: string) => {\n        const allTeamNames = allteamNames.filter(n => n != otherTeamName)\n        const randomName = shuffle(allTeamNames)[0]\n        return randomName\n    }\n\n    const playerDeleteButtonWasPressed = (playerIndex: number) => {\n        const newPlayers = state.players.filter((p, i) => (i !== playerIndex))\n        setState(s => ({ ...state, players: newPlayers }))\n    }\n\n    const copyButtonWasPressed = () => {\n        const textToCopy = ` TEAM ONE - ${state.teamOneName}\\n ----------\\n${state.teamOne.map(p => ` ${p}`)}\\n\\n TEAM TWO - ${state.teamTwoName}\\n ----------\\n${state.teamTwo.map(p => ` ${p}`)}`\n\n        navigator.clipboard.writeText(textToCopy).then(function () {\n            //INDICATE TEXT COPIED\n        }, function () {\n            //CLIPBOARD NOT ALLOWED MESSAGE\n        });\n    }\n\n    const clearAllButtonWasPressed = () => {\n        setState(s => ({ ...state, players: [], teamOne: [], teamTwo: [] }))\n    }\n\n    return (\n        <div>\n            <div id=\"top-bar\">\n                <button className=\"shuffle-button\" onClick={() => shuffleButtonWasPressed()}>Random Shuffle</button>\n                <button className=\"action-button\" onClick={() => copyButtonWasPressed()}>COPY</button>\n                <button className=\"action-button\" onClick={() => clearAllButtonWasPressed()}>CLEAR ALL</button>\n                <button className=\"action-button\" onClick={() => newTeamNamesButtonWasPressed()}>NEW TEAM NAMES</button>\n            </div>\n            <div id=\"team-section\">\n                <div className=\"team\" id=\"team-one\">\n                <h1>{`TEAM ONE - ${state.teamOneName}`}</h1>\n                {state.teamOne.map(p => <p>{p}</p>)}\n                </div>\n                <div className=\"team\" id=\"team-two\">\n                <h1>{`TEAM TWO - ${state.teamTwoName}`}</h1>\n                {state.teamTwo.map(p => <p>{p}</p>)}\n                </div>\n            </div>\n            <div id=\"side-bar\">\n                <h1>QUICK ADD</h1>\n                <div id=\"quick-add-section\">\n                    {state.quickAddPlayers.sort((a, b) => (a.name < b.name ? -1 : 1)).map(p => <button className=\"quick-add-button\" onClick={() => addPlayerToShuffle(p.name)}>{p.name}</button>)}\n                </div>\n                <hr></hr>\n                <AppPlayerSection onTextInputChangedFunction={playerTextChanged} textInput={state.playerInput} addPlayerButtonFunction={addPlayerToShuffle}></AppPlayerSection>\n                <hr></hr>\n                {state.players.map((p, i) => (<ListedPlayer playerDeletedButtonWasPressedFunction={playerDeleteButtonWasPressed} name={p.name} index={i}></ListedPlayer>))}\n            </div>\n            <div id=\"mid-page-section\">\n            </div>\n            <div id=\"right-side-bar\">\n                <h1>LADDER</h1>\n                {state.storedPlayers.sort((a, b) => (a.rank > b.rank ? -1 : 1)).map(p => <RankItem name={p.name} rank={p.rank}></RankItem>)}\n            </div>\n        </div>\n    )\n}\n\n//yarn run deploy","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}